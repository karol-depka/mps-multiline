package de.slisson.mps.editor.multiline.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.project.Solution;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_runtimeLibs_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_runtimeLibs_NonTypesystemRule() {
  }

  public void applyRule(final SNode usingLangModule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Language usingLang = ModuleRepositoryFacade.getInstance().getModule(INamedConcept_Behavior.call_getFqName_1213877404258(usingLangModule), Language.class);
    if (usingLang != null) {
      for (ModuleReference langRef : CollectionSequence.fromCollection(usingLang.getUsedLanguagesReferences())) {
        Language usedLang = ModuleRepositoryFacade.getInstance().getModule(langRef.getModuleFqName(), Language.class);
        for (ModuleReference runtimeSolutionRef : CollectionSequence.fromCollection(usedLang.getRuntimeModulesReferences())) {
          Solution runtimeSolution = ModuleRepositoryFacade.getInstance().getModule(runtimeSolutionRef, Solution.class);
          String runtimeSolutionSourcesPath = runtimeSolution.getGeneratorOutputPath();
          Iterable<File> designTimeSources = Sequence.fromIterable(Sequence.fromArray(usingLang.getSourcePaths().toArray(new String[]{}))).select(new ISelector<String, File>() {
            public File select(String it) {
              return new File(it);
            }
          });

          if (!(Sequence.fromIterable(designTimeSources).contains(new File(runtimeSolutionSourcesPath)))) {
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(usingLangModule, "Not in design time sources: " + runtimeSolutionSourcesPath, "r:2e3bedda-d2c6-42ea-8f39-83cfe0a4ed64(de.slisson.mps.editor.multiline.typesystem)", "9030445917800629776", null, errorTarget);
            }
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.project.structure.Module";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
